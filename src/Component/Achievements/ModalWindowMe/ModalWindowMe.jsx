// ModalWindowMe.jsx
import React, { useState, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X } from "lucide-react";
import styles from "./ModalWindowMe.module.css";
import { toast } from "react-hot-toast";

/**
 * Props:
 *  - getMakingPicture(isModalOpen, username) -> axios response (response.data.url = base64 image)
 *  - isModalOpen - –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–ª–∏ false/null
 *  - closeModal() - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
 *  - username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
const ModalWindowMe = ({ getMakingPicture, isModalOpen, closeModal, username }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [imageUrl, setImageUrl] = useState(null);
  const newWindowRef = useRef(null);

  const handleGenerate = async () => {
    if (!isModalOpen?.title) return;
    setIsLoading(true);
    setImageUrl(null);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –≤–∫–ª–∞–¥–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª pop-up)
    try {
      newWindowRef.current = window.open("", "_blank");
    } catch (err) {
      newWindowRef.current = null;
    }

    try {
      const response = await getMakingPicture(isModalOpen, username);
      const base64 = response?.data?.url;

      if (!base64) {
        toast.error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.");
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–∏
        if (newWindowRef.current && !newWindowRef.current.closed) newWindowRef.current.close();
        return;
      }

      setImageUrl(base64);
      toast.success("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞—é –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ...");

      // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—É—Å—Ç—É—é –≤–∫–ª–∞–¥–∫—É ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –Ω–µ—ë –∫–∞—Ä—Ç–∏–Ω–∫—É
      if (newWindowRef.current && !newWindowRef.current.closed) {
        try {
          // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å location –Ω–∞ data:url
          newWindowRef.current.location.href = base64;
        } catch (err) {
          // –ù–µ–∫–æ—Ç–æ—Ä—ã–º –±—Ä–∞—É–∑–µ—Ä–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å location –Ω–∞ data:
          // –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—Å—Ç–∞–≤–∏–º html —Å —Ç–µ–≥–æ–º img
          try {
            newWindowRef.current.document.write(`
              <html>
                <head><title>Achievement</title></head>
                <body style="margin:0;display:flex;align-items:center;justify-content:center;background:#0b0b0b;">
                  <img src="${base64}" style="max-width:100%;height:auto;display:block" />
                </body>
              </html>
            `);
            newWindowRef.current.document.close();
          } catch (err2) {
            // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∑–∞–∫—Ä–æ–µ–º –≤–∫–ª–∞–¥–∫—É –∏ —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É:", err2);
            if (newWindowRef.current && !newWindowRef.current.closed) newWindowRef.current.close();
            toast("–ü–æ–ø–∞–ø/–≤–∫–ª–∞–¥–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—Ä—É—á–Ω—É—é.", { icon: "‚ö†Ô∏è" });
          }
        }
      } else {
        // –ü–æ–ø–∞–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤ –º–æ–¥–∞–ª–∫–µ
        toast("–ü–æ–ø–∞–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—Ä—É—á–Ω—É—é (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).", { icon: "‚ö†Ô∏è" });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
      if (newWindowRef.current && !newWindowRef.current.closed) newWindowRef.current.close();
    } finally {
      setIsLoading(false);
    }
  };

  const handleOpenImage = () => {
    if (!imageUrl) {
      toast.error("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
      return;
    }
    window.open(imageUrl, "_blank");
  };

  return (
    <AnimatePresence>
      {isModalOpen && (
        <motion.div
          className={styles.modalBackdrop}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          onClick={closeModal}
        >
          <motion.div
            className={styles.modalContent}
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            transition={{ duration: 0.2 }}
            onClick={(e) => e.stopPropagation()}
          >
            <button
              onClick={closeModal}
              className={styles.closeButton}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
            >
              <X size={20} />
            </button>

            <h2 className={styles.modalTitle}>{isModalOpen.title}</h2>

            {isModalOpen.image && (
              <img className={styles.modalImg} src={isModalOpen.image} alt={isModalOpen.title} />
            )}

            {isModalOpen.description && (
              <p className={styles.modalText}>{isModalOpen.description}</p>
            )}

            {imageUrl ? (
              <div className={styles.imageWrapper}>
                <img className={styles.modalImCopy} src={imageUrl} alt={isModalOpen.title} />
                <div className={styles.shareContainer}>
                  <button className={styles.shareButton} onClick={handleOpenImage}>
                    üîó –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  </button>
                </div>
                <p className={styles.shareText}>
                  –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é.
                </p>
              </div>
            ) : (
              <div className={styles.shareContainer}>
                <button
                  className={styles.shareButton}
                  onClick={handleGenerate}
                  disabled={isLoading}
                >
                  {isLoading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"}
                </button>
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ModalWindowMe;
