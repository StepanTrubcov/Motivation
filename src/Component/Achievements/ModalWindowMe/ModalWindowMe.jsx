import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X } from "lucide-react";
import styles from "./ModalWindowMe.module.css";
import { toast } from "react-hot-toast";

const ModalWindowMe = ({ getMakingPicture, isModalOpen, closeModal, username }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [imageUrl, setImageUrl] = useState(null);

  const handleGenerate = async () => {
    if (!isModalOpen?.title) return;
    setIsLoading(true);

    try {
      const response = await getMakingPicture(isModalOpen, username);
      const url = response.data?.url;

      if (url) {
        setImageUrl(url);
        toast.success("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞!");
      } else {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ üòî");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üòî");
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
  const handleShareToTelegram = async () => {
    if (!imageUrl) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram Web Apps API
      if (!window.Telegram?.WebApp) {
        toast.error("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram üòî");
        return;
      }

      const telegram = window.Telegram.WebApp;

      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ imageUrl - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π URL
      // –ï—Å–ª–∏ imageUrl - —ç—Ç–æ base64, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const isBase64 = imageUrl.startsWith("data:image");
      let imageUrlForSharing = imageUrl;

      if (isBase64) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º base64 –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
        // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API-–≤—ã–∑–æ–≤
        const formData = new FormData();
        const blob = await fetch(imageUrl).then((res) => res.blob());
        formData.append("image", blob, "shared_image.png");

        const uploadResponse = await fetch("/upload-image", {
          method: "POST",
          body: formData,
        });
        const uploadData = await uploadResponse.json();
        imageUrlForSharing = uploadData.url; // –ü—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      }

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      telegram.openTelegramLink(
        `https://t.me/share/url?url=${encodeURIComponent(imageUrlForSharing)}&text=${encodeURIComponent(
          isModalOpen.title || "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
        )}`
      );

      toast.success("–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram!");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º üòî");
    }
  };

  const handleCopyImage = async () => {
    if (!imageUrl) return;
    try {
      const blob = await fetch(imageUrl).then((res) => res.blob());
      const item = new ClipboardItem({ [blob.type]: blob });
      await navigator.clipboard.write([item]);
      toast.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòî");
    }
  };

  return (
    <AnimatePresence>
      {isModalOpen && (
        <motion.div
          className={styles.modalBackdrop}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
          onClick={closeModal}
        >
          <motion.div
            className={styles.modalContent}
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.8, opacity: 0 }}
            transition={{ duration: 0.3 }}
            onClick={(e) => e.stopPropagation()}
          >
            <button
              onClick={closeModal}
              className={styles.closeButton}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
            >
              <X size={24} />
            </button>

            <h2 className={styles.modalTitle}>{isModalOpen.title}</h2>
            {isModalOpen.image && <img className={styles.modalImg} src={isModalOpen.image} alt="" />}
            {isModalOpen.description && (
              <p className={styles.modalText}>{isModalOpen.description}</p>
            )}

            {imageUrl ? (
              <div className={styles.imageWrapper}>
                <img className={styles.modalImCopy} src={imageUrl} alt={isModalOpen.title} />
                <div className={styles.shareContainer}>
                  <button className={styles.shareButton} onClick={handleShareToTelegram}>
                    üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
                  </button>
                  <button className={styles.shareButton} onClick={handleCopyImage}>
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  </button>
                </div>
              </div>
            ) : (
              <div className={styles.shareContainer}>
                <button
                  className={styles.shareButton}
                  onClick={handleGenerate}
                  disabled={isLoading}
                >
                  {isLoading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"}
                </button>
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ModalWindowMe;