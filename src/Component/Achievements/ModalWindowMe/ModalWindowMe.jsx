import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X } from "lucide-react";
import styles from "./ModalWindowMe.module.css";
import { toast } from "react-hot-toast";

const ModalWindowMe = ({ getMakingPicture, isModalOpen, closeModal, username }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [imageUrl, setImageUrl] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleGenerate = async () => {
    if (!isModalOpen?.title) {
      toast.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ üòî");
      return;
    }
    setIsLoading(true);

    try {
      const response = await getMakingPicture(isModalOpen, username);
      const url = response.data?.url;

      if (url) {
        setImageUrl(url);
        toast.success("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞!");
      } else {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: –ø—É—Å—Ç–æ–π URL üòî");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üòî");
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ base64 –≤ Blob
  const base64ToBlob = (base64) => {
    try {
      const byteString = atob(base64.split(",")[1]);
      const mimeString = base64.split(",")[0].split(":")[1].split(";")[0];
      const ab = new ArrayBuffer(byteString.length);
      const ia = new Uint8Array(ab);
      for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      return new Blob([ab], { type: mimeString });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ base64:", err);
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleDownloadImage = () => {
    if (!imageUrl) {
      toast.error("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üòî");
      return;
    }

    try {
      let fileUrl;
      let blob;

      if (imageUrl.startsWith("data:image")) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Blob
        blob = base64ToBlob(imageUrl);
        fileUrl = URL.createObjectURL(blob);
      } else {
        // –ï—Å–ª–∏ imageUrl ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π URL
        fileUrl = imageUrl;
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement("a");
      link.href = fileUrl;
      link.download = `image_${Date.now()}.png`; // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º URL, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è Blob
      if (imageUrl.startsWith("data:image")) {
        URL.revokeObjectURL(fileUrl);
      }

      toast.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ! –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòî");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const handleCopyImage = async () => {
    if (!imageUrl) {
      toast.error("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üòî");
      return;
    }

    try {
      const blob = imageUrl.startsWith("data:image")
        ? base64ToBlob(imageUrl)
        : await fetch(imageUrl).then((res) => {
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
            return res.blob();
          });
      const item = new ClipboardItem({ [blob.type]: blob });
      await navigator.clipboard.write([item]);
      toast.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòî (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å)");
    }
  };

  return (
    <AnimatePresence>
      {isModalOpen && (
        <motion.div
          className={styles.modalBackdrop}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
          onClick={closeModal}
        >
          <motion.div
            className={styles.modalContent}
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.8, opacity: 0 }}
            transition={{ duration: 0.3 }}
            onClick={(e) => e.stopPropagation()}
          >
            <button
              onClick={closeModal}
              className={styles.closeButton}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
            >
              <X size={24} />
            </button>

            <h2 className={styles.modalTitle}>{isModalOpen.title}</h2>
            {isModalOpen.image && <img className={styles.modalImg} src={isModalOpen.image} alt="" />}
            {isModalOpen.description && (
              <p className={styles.modalText}>{isModalOpen.description}</p>
            )}

            {imageUrl ? (
              <div className={styles.imageWrapper}>
                <img className={styles.modalImCopy} src={imageUrl} alt={isModalOpen.title} />
                <div className={styles.shareContainer}>
                  <button className={styles.shareButton} onClick={handleDownloadImage}>
                    üì• –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  </button>
                  <button className={styles.shareButton} onClick={handleCopyImage}>
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  </button>
                </div>
              </div>
            ) : (
              <div className={styles.shareContainer}>
                <button
                  className={styles.shareButton}
                  onClick={handleGenerate}
                  disabled={isLoading}
                >
                  {isLoading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"}
                </button>
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ModalWindowMe;