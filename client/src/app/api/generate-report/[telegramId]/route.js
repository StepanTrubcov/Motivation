import { prisma } from '@/lib/prisma/prismaClient';
import { NextResponse } from 'next/server';

export async function POST(request, { params }) {
  try {
    const { telegramId } = await params;
    const { goalsDone = [], goalsInProgress = [] } = await request.json();

    if (!Array.isArray(goalsDone) || !Array.isArray(goalsInProgress)) {
      return NextResponse.json({ error: "–ù—É–∂–Ω—ã –º–∞—Å—Å–∏–≤—ã goalsDone –∏ goalsInProgress" }, { status: 400 });
    }

    const allGoals = [...goalsDone, ...goalsInProgress];
    if (allGoals.length === 0) {
      return NextResponse.json({ error: "–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞" }, { status: 400 });
    }

    const doneCount = goalsDone.length;
    const totalCount = allGoals.length;
    const ratio = doneCount / totalCount;

    let diaryNote = '';
    if (ratio >= 1) diaryNote = "–°–µ–≥–æ–¥–Ω—è —è —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –Ø –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —á—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å! üî•";
    else if (ratio >= 0.8) diaryNote = "–°–µ–≥–æ–¥–Ω—è —è —Å–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ—á—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! ‚ö°";
    else if (ratio >= 0.5) diaryNote = "–°–µ–≥–æ–¥–Ω—è —è —Å–¥–µ–ª–∞–ª –ø–æ–ª–æ–≤–∏–Ω—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ. –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É. üå±";
    else if (doneCount > 0) diaryNote = "–°–µ–≥–æ–¥–Ω—è —è –≤—ã–ø–æ–ª–Ω–∏–ª —á–∞—Å—Ç—å —Ü–µ–ª–µ–π. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üí™";
    else diaryNote = "–°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ, —á–µ–º —Ö–æ—Ç–µ–ª–æ—Å—å, –Ω–æ –∑–∞–≤—Ç—Ä–∞ —è —Å–¥–µ–ª–∞—é –±–æ–ª—å—à–µ. üí°";

    const goalsList = allGoals
      .map(g => {
        const title = String(g.title || '').replace(/\u00A0/g, ' ').trim();
        const statusIcon = g.status === 'completed' ? '‚úÖ' : '‚òëÔ∏è';
        return `${statusIcon} ${title}`;
      })
      .join('\n\n');

    const today = new Date();
    const todayString = today.toDateString();
    const formattedDate = today.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' });
    const finalMessage = [`${formattedDate} #v1 #–¥–¥`, goalsList, diaryNote].join('\n\n').trim();

    const user = await prisma.user.findUnique({ where: { telegramId: String(telegramId) } });
    if (!user) {
      return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    let prevReports = Array.isArray(user.yesterdayReport) ? user.yesterdayReport : [];
    let yesterdayReport = null;

    if (prevReports.length === 2) {
      const prevSecond = prevReports[1];
      const prevSecondDate = new Date(prevSecond.date).toDateString();
      if (prevSecondDate !== todayString) {
        yesterdayReport = prevSecond;
      } else {
        yesterdayReport = prevReports[0] || null;
      }
    } else if (prevReports.length === 1) {
      const prevDate = new Date(prevReports[0].date).toDateString();
      if (prevDate !== todayString) yesterdayReport = prevReports[0];
    }

    const todayReport = { text: finalMessage, date: today.toISOString() };
    const reports = [yesterdayReport, todayReport];

    await prisma.user.update({
      where: { telegramId: String(telegramId) },
      data: { yesterdayReport: reports },
    });

    return NextResponse.json({ message: finalMessage, success: true, savedReports: reports });
  } catch (error) {
    console.error('Error in /api/generate-report:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: ' + error.message }, { status: 500 });
  }
}
