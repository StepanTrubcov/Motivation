import { NextResponse } from 'next/server';
import { createCanvas } from 'canvas';

export async function POST(request) {
  try {
    const { title, description, points, username } = await request.json();

    if (!title || !description) {
      return NextResponse.json({ success: false, message: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' }, { status: 400 });
    }

    try {
      const width = 1200;
      const height = 630;
      const canvas = createCanvas(width, height);
      const ctx = canvas.getContext('2d');

      // –§–æ–Ω
      ctx.fillStyle = '#0b0b0b';
      ctx.fillRect(0, 0, width, height);

      // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ctx.fillStyle = '#00ff99';
      ctx.font = 'bold 48px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(`@${username || 'user'}`, 80, 100);

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 80px Arial';
      ctx.fillText(title, 80, 200);

      // –û–ø–∏—Å–∞–Ω–∏–µ
      ctx.font = '34px Arial';
      ctx.fillStyle = '#ffffff';
      const maxWidth = width - 160;
      const words = description.split(' ');
      let line = '';
      let y = 270;
      for (const word of words) {
        const testLine = line + word + ' ';
        const metrics = ctx.measureText(testLine);
        if (metrics.width > maxWidth) {
          ctx.fillText(line.trim(), 80, y);
          line = word + ' ';
          y += 45;
        } else {
          line = testLine;
        }
      }
      ctx.fillText(line.trim(), 80, y);

      // –û—á–∫–∏
      ctx.fillStyle = '#00ff99';
      ctx.font = 'bold 40px Arial';
      ctx.fillText(`+${points || 0} –æ—á–∫–æ–≤`, 80, y + 70);

      // –¶–∏—Ç–∞—Ç—ã
      const quotes = [
        '¬´–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –ª—É—á—à–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –±—É–¥—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞ üí´¬ª',
        '¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º üå±¬ª',
        '¬´–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å–∏–ª—å–Ω–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚ö°Ô∏è¬ª',
        '¬´–ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å. –ò–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–µ –±—É–¥–µ—Ç ‚è≥¬ª',
        '¬´–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞ 1% –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞ üöÄ¬ª',
      ];
      const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
      ctx.font = 'italic 30px Arial';
      ctx.fillStyle = '#9b9b9b';
      ctx.fillText(randomQuote, 80, height - 60);

      const base64 = canvas.toDataURL('image/png');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ base64 –Ω–µ –ø—É—Å—Ç–æ–π
      if (!base64 || base64 === 'data:image/png;base64,') {
        throw new Error('Canvas returned empty image data');
      }
      
      return NextResponse.json({
        success: true,
        url: base64,
      });
    } catch (canvasError) {
      console.error('Canvas error (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ Vercel):', canvasError);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ canvas –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const encodedTitle = encodeURIComponent(title);
      const placeholderUrl = `https://via.placeholder.com/1200x630/0b0b0b/ffffff.png?text=${encodedTitle}`;
      
      return NextResponse.json({
        success: true,
        url: placeholderUrl,
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ share-–∫–∞—Ä—Ç–∏–Ω–∫–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      url: null
    }, { status: 500 });
  }
}