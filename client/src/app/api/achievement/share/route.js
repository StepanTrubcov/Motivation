import { NextResponse } from 'next/server';
import { join } from 'path';

let canvasModule;
try {
  canvasModule = require('canvas');
  console.log('‚úÖ Canvas module loaded successfully');
} catch (error) {
  console.warn('‚ö†Ô∏è Canvas module not available:', error.message);
  canvasModule = null;
}

// –ï—Å–ª–∏ canvas –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
if (canvasModule) {
  try {
    const { registerFont } = canvasModule;
    const fontsDir = join(process.cwd(), 'public', 'fonts');
    registerFont(join(fontsDir, 'Inter-Bold.ttf'), { family: 'Inter', weight: 'bold' });
    registerFont(join(fontsDir, 'Inter-Regular.ttf'), { family: 'Inter', weight: 'normal' });
    console.log('‚úÖ Fonts registered successfully');
  } catch (error) {
    console.error('‚ùå Error registering fonts:', error);
  }
}

export async function POST(request) {
  try {
    const { title, description, image, points, username } = await request.json();

    if (!title || !description) {
      return NextResponse.json({ success: false, message: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' }, { status: 400 });
    }

    // –ï—Å–ª–∏ canvas –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (!canvasModule) {
      return NextResponse.json({ 
        success: false, 
        message: '–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' 
      }, { status: 503 });
    }

    const { createCanvas } = canvasModule;
    const width = 1200;
    const height = 630;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // –§–æ–Ω
    ctx.fillStyle = '#0b0b0b';
    ctx.fillRect(0, 0, width, height);

    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.fillStyle = '#00ff99';
    ctx.font = 'bold 48px Inter';
    ctx.textAlign = 'left';
    ctx.fillText(`@${username || 'user'}`, 80, 100);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 80px Inter';
    ctx.fillText(title, 80, 200);

    // –û–ø–∏—Å–∞–Ω–∏–µ
    ctx.font = '34px Inter';
    ctx.fillStyle = '#ffffff';
    const maxWidth = width - 160;
    const words = description.split(' ');
    let line = '';
    let y = 270;
    for (const word of words) {
      const testLine = line + word + ' ';
      const metrics = ctx.measureText(testLine);
      if (metrics.width > maxWidth && line !== '') {
        ctx.fillText(line.trim(), 80, y);
        line = word + ' ';
        y += 45;
      } else {
        line = testLine;
      }
    }
    ctx.fillText(line.trim(), 80, y);

    // –û—á–∫–∏
    ctx.fillStyle = '#00ff99';
    ctx.font = 'bold 40px Inter';
    ctx.fillText(`+${points || 0} –æ—á–∫–æ–≤`, 80, y + 70);

    // –¶–∏—Ç–∞—Ç—ã
    const quotes = [
      '¬´–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –ª—É—á—à–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –±—É–¥—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞ üí´¬ª',
      '¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º üå±¬ª',
      '¬´–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å–∏–ª—å–Ω–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚ö°Ô∏è¬ª',
      '¬´–ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å. –ò–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–µ –±—É–¥–µ—Ç ‚è≥¬ª',
      '¬´–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞ 1% –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞ üöÄ¬ª',
    ];
    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];

    ctx.font = 'italic 30px Inter';
    ctx.fillStyle = '#9b9b9b';
    ctx.fillText(randomQuote, 80, height - 60);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const buffer = canvas.toBuffer('image/png');
    const base64 = `data:image/png;base64,${buffer.toString('base64')}`;

    return NextResponse.json({
      success: true,
      url: base64,
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ share-–∫–∞—Ä—Ç–∏–Ω–∫–∏:', error);
    return NextResponse.json({ success: false, message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' }, { status: 500 });
  }
}