'use client';
import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X, Copy } from "lucide-react";
import styles from "./ModalWindowGeneration.module.css";
import gpt from '../../../../img/gpt.gif'
import { toast } from "react-hot-toast";

const ModalWindowGeneration = ({ telegramId, yesterdayReport = [], addTextGenerationData, isModalOpen, closeModal, goalsDone = [], goalsInProgress = [], setIsModalOpenText }) => {
    const [loading, setLoading] = useState(false);
    const [generatedText, setGeneratedText] = useState('');
    const [error, setError] = useState("");
    const [prevGoals, setPrevGoals] = useState({ done: [], inProgress: [] });

    useEffect(() => {
        const currentGoals = {
            done: goalsDone || [],
            inProgress: goalsInProgress || []
        };
        if (JSON.stringify(currentGoals) !== JSON.stringify(prevGoals)) {
            setGeneratedText('');
            setPrevGoals(currentGoals);
        }
    }, [goalsDone, goalsInProgress, prevGoals]);

    const generation = async () => {
        setLoading(true);
        setError("");
        setGeneratedText("");
        await addTextGenerationData(telegramId, goalsDone, goalsInProgress, setGeneratedText, setLoading)
        toast.success("–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üìù");
    };

    const copyToClipboard = async (text) => {
        await navigator.clipboard.writeText(text);
        toast.success("–û—Ç—á—ë—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
        closeModal()
    };

    return (
        <AnimatePresence>
            {isModalOpen && (
                <motion.div
                    className={styles.modalBackdrop}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    onClick={closeModal}
                >
                    <motion.div
                        className={styles.modalContent}
                        initial={{ scale: 0.8, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        exit={{ scale: 0.8, opacity: 0 }}
                        transition={{ duration: 0.3 }}
                        onClick={(e) => e.stopPropagation()}
                    >
                        <button
                            onClick={closeModal}
                            className={styles.closeButton}
                            aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
                        >
                            <X size={24} />
                        </button>

                        <h2 className={styles.modalTitle}>
                            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ü–µ–ª—è—Ö
                        </h2>
                        {generatedText && (<div>
                            <div className={styles.generation__text}>
                                –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á—ë—Ç
                            </div>
                            <div className={styles.generatedBox}>
                                <div onClick={() => setIsModalOpenText(generatedText)} className={styles.previewWrapper}>
                                    <pre className={styles.previewText}>
                                        {generatedText.split("\n").slice(0, 1).join("\n")}
                                        {generatedText.split("\n").length > 1 ? "\n..." : ""}
                                    </pre>
                                </div>
                                <button
                                    className={styles.copyButton}
                                    onClick={() => copyToClipboard(generatedText)}
                                    aria-label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"
                                >
                                    <Copy size={28} />
                                </button>
                            </div>
                        </div>
                        ) || (
                                <div>
                                    <div className={styles.modalTextInfo}>
                                        ‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á—ë—Ç –∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–∏—Ç—å –µ–≥–æ –≤ –•–æ—Ä–æ—à—É—é –∫–æ–º–ø–∞–Ω–∏—é, Telegram-–∫–∞–Ω–∞–ª –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è —Å–µ–±—è.
                                    </div>
                                    <button
                                        className={styles.button}
                                        onClick={generation}
                                        disabled={loading}
                                    >
                                        {loading ? (
                                            <div className={styles.text}>
                                                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</div>
                                        ) : (
                                            <div className={styles.text}>
                                                <img
                                                    className={styles.img}
                                                    src="https://cdn-icons-png.flaticon.com/512/11865/11865338.png"
                                                    alt="generate"
                                                />
                                                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                                            </div>
                                        )}
                                    </button>
                                </div>
                            )}
                        {yesterdayReport[0] && (<div>
                            <div className={styles.generation__text}>
                                –ü—Ä–æ—à–ª—ã–π –æ—Ç—á—ë—Ç
                            </div>
                            <div className={styles.generatedBox}>
                                <div onClick={() => setIsModalOpenText(yesterdayReport[0].text)} className={styles.previewWrapper}>
                                    <pre className={styles.previewText}>
                                        {yesterdayReport[0].text.split("\n").slice(0, 1).join("\n")}
                                        {yesterdayReport[0].text.split("\n").length > 1 ? "\n..." : ""}
                                    </pre>
                                </div>
                                <button
                                    className={styles.copyButton}
                                    onClick={() => copyToClipboard(yesterdayReport[0].text)}
                                    aria-label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"
                                >
                                    <Copy size={28} />
                                </button>
                            </div>
                        </div>
                        )}
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

export default ModalWindowGeneration;
