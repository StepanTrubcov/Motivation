// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–ª–µ–π –≤ –ë–î
// –ó–∞–ø—É—Å–∫–∞—Ç—å: node scripts/check-goals-schema.js

const { PrismaClient } = require('../client/node_modules/@prisma/client');

const prisma = new PrismaClient();

async function checkGoalsSchema() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const goals = await prisma.goal.findMany({
      take: 3 // –í–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ü–µ–ª–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    });
    
    if (goals.length === 0) {
      console.log('‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ü–µ–ª–µ–π');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π: ${goals.length}\n`);
      goals.forEach((goal, index) => {
        console.log(`--- –¶–µ–ª—å ${index + 1} ---`);
        console.log(`ID: ${goal.id}`);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${goal.title}`);
        console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${goal.category || '–ù–ï –£–ö–ê–ó–ê–ù–ê'}`);
        console.log(`–°—Ç–∞—Ç—É—Å: ${goal.status}`);
        console.log(`–û—á–∫–∏: ${goal.points}`);
        console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${goal.progress}`);
        console.log('');
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = ['Sport', 'Discipline', 'Self_development', 'Spirituality'];
    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    for (const category of categories) {
      const count = await prisma.goal.count({
        where: { category }
      });
      console.log(`  ${category}: ${count} —Ü–µ–ª–µ–π`);
    }
    
    const withoutCategory = await prisma.goal.count({
      where: { category: null }
    });
    console.log(`  –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${withoutCategory} —Ü–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkGoalsSchema();
