// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î
// –ó–∞–ø—É—Å–∫–∞—Ç—å: node scripts/check-tables.js

const { PrismaClient } = require('../client/node_modules/@prisma/client');

const prisma = new PrismaClient();

async function checkTables() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User
    try {
      const userCount = await prisma.user.count();
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ User —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∑–∞–ø–∏—Å–µ–π: ${userCount})`);
    } catch (e) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ User –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Goal
    try {
      const goalCount = await prisma.goal.count();
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ Goal —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∑–∞–ø–∏—Å–µ–π: ${goalCount})`);
    } catch (e) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ Goal –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Achievement
    try {
      const achievementCount = await prisma.achievement.count();
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ Achievement —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∑–∞–ø–∏—Å–µ–π: ${achievementCount})`);
    } catch (e) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ Achievement –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    console.log('\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkTables();
